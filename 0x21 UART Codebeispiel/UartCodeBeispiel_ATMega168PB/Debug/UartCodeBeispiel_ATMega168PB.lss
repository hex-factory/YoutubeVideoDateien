
UartCodeBeispiel_ATMega168PB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000032e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  00800100  00800100  000003a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000418  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001466  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bbd  00000000  00000000  0000198e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007af  00000000  00000000  0000254b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c8  00000000  00000000  00002cfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ac  00000000  00000000  00002ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000045d  00000000  00000000  00003570  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000039cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__vector_18>
  4c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__vector_19>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_clear_bss>:
  78:	21 e0       	ldi	r18, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
  80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
  82:	a4 32       	cpi	r26, 0x24	; 36
  84:	b2 07       	cpc	r27, r18
  86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>
  88:	0e 94 b0 00 	call	0x160	; 0x160 <main>
  8c:	0c 94 95 01 	jmp	0x32a	; 0x32a <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  94:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <system_init>
  98:	08 95       	ret

0000009a <__vector_18>:
#include <compiler.h>

#include "fifo.h"

ISR(USART_RX_vect)
{
  9a:	1f 92       	push	r1
  9c:	0f 92       	push	r0
  9e:	0f b6       	in	r0, 0x3f	; 63
  a0:	0f 92       	push	r0
  a2:	11 24       	eor	r1, r1
  a4:	2f 93       	push	r18
  a6:	3f 93       	push	r19
  a8:	4f 93       	push	r20
  aa:	5f 93       	push	r21
  ac:	6f 93       	push	r22
  ae:	7f 93       	push	r23
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  b4:	af 93       	push	r26
  b6:	bf 93       	push	r27
  b8:	ef 93       	push	r30
  ba:	ff 93       	push	r31
	fifo_write(FIFO_UART_RX, UDR0);
  bc:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	0e 94 06 01 	call	0x20c	; 0x20c <fifo_write>
}
  c6:	ff 91       	pop	r31
  c8:	ef 91       	pop	r30
  ca:	bf 91       	pop	r27
  cc:	af 91       	pop	r26
  ce:	9f 91       	pop	r25
  d0:	8f 91       	pop	r24
  d2:	7f 91       	pop	r23
  d4:	6f 91       	pop	r22
  d6:	5f 91       	pop	r21
  d8:	4f 91       	pop	r20
  da:	3f 91       	pop	r19
  dc:	2f 91       	pop	r18
  de:	0f 90       	pop	r0
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	0f 90       	pop	r0
  e4:	1f 90       	pop	r1
  e6:	18 95       	reti

000000e8 <__vector_19>:

ISR(USART_UDRE_vect)
{
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
  f2:	2f 93       	push	r18
  f4:	3f 93       	push	r19
  f6:	4f 93       	push	r20
  f8:	5f 93       	push	r21
  fa:	6f 93       	push	r22
  fc:	7f 93       	push	r23
  fe:	8f 93       	push	r24
 100:	9f 93       	push	r25
 102:	af 93       	push	r26
 104:	bf 93       	push	r27
 106:	ef 93       	push	r30
 108:	ff 93       	push	r31
	if (fifo_isEmpty(FIFO_UART_TX)){
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	0e 94 69 01 	call	0x2d2	; 0x2d2 <fifo_isEmpty>
 110:	88 23       	and	r24, r24
 112:	31 f0       	breq	.+12     	; 0x120 <__vector_19+0x38>
		USART_0_DISABLE_UDRE_ISR
 114:	e1 ec       	ldi	r30, 0xC1	; 193
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	8f 7d       	andi	r24, 0xDF	; 223
 11c:	80 83       	st	Z, r24
 11e:	05 c0       	rjmp	.+10     	; 0x12a <__vector_19+0x42>
	} else {
		UDR0 = fifo_read(FIFO_UART_TX);
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	0e 94 3b 01 	call	0x276	; 0x276 <fifo_read>
 126:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	}
}
 12a:	ff 91       	pop	r31
 12c:	ef 91       	pop	r30
 12e:	bf 91       	pop	r27
 130:	af 91       	pop	r26
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	7f 91       	pop	r23
 138:	6f 91       	pop	r22
 13a:	5f 91       	pop	r21
 13c:	4f 91       	pop	r20
 13e:	3f 91       	pop	r19
 140:	2f 91       	pop	r18
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <writeData>:
#include <atmel_start.h>
#include "usart.h"
#include "fifo.h"

void writeData(uint8_t din){
	fifo_write(FIFO_UART_TX, din);
 14c:	68 2f       	mov	r22, r24
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	0e 94 06 01 	call	0x20c	; 0x20c <fifo_write>
	USART_0_ENABLE_UDRE_ISR;
 154:	e1 ec       	ldi	r30, 0xC1	; 193
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	80 62       	ori	r24, 0x20	; 32
 15c:	80 83       	st	Z, r24
 15e:	08 95       	ret

00000160 <main>:
}

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 160:	0e 94 4a 00 	call	0x94	; 0x94 <atmel_start_init>
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
 164:	2d 98       	cbi	0x05, 5	; 5

	LED_set_level(false);

	writeData('h');
 166:	88 e6       	ldi	r24, 0x68	; 104
 168:	0e 94 a6 00 	call	0x14c	; 0x14c <writeData>
	writeData('e');
 16c:	85 e6       	ldi	r24, 0x65	; 101
 16e:	0e 94 a6 00 	call	0x14c	; 0x14c <writeData>
	writeData('l');
 172:	8c e6       	ldi	r24, 0x6C	; 108
 174:	0e 94 a6 00 	call	0x14c	; 0x14c <writeData>
	writeData('l');
 178:	8c e6       	ldi	r24, 0x6C	; 108
 17a:	0e 94 a6 00 	call	0x14c	; 0x14c <writeData>
	writeData('o');
 17e:	8f e6       	ldi	r24, 0x6F	; 111
 180:	0e 94 a6 00 	call	0x14c	; 0x14c <writeData>
	
	/* Replace with your application code */
	while (1) {
		if(!fifo_isEmpty(FIFO_UART_RX))
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	0e 94 69 01 	call	0x2d2	; 0x2d2 <fifo_isEmpty>
 18a:	81 11       	cpse	r24, r1
 18c:	fb cf       	rjmp	.-10     	; 0x184 <main+0x24>
		{
			writeData(' ');
 18e:	80 e2       	ldi	r24, 0x20	; 32
 190:	0e 94 a6 00 	call	0x14c	; 0x14c <writeData>
			writeData('r');
 194:	82 e7       	ldi	r24, 0x72	; 114
 196:	0e 94 a6 00 	call	0x14c	; 0x14c <writeData>
			writeData(':');
 19a:	8a e3       	ldi	r24, 0x3A	; 58
 19c:	0e 94 a6 00 	call	0x14c	; 0x14c <writeData>
			writeData(fifo_read(FIFO_UART_RX));
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	0e 94 3b 01 	call	0x276	; 0x276 <fifo_read>
 1a6:	0e 94 a6 00 	call	0x14c	; 0x14c <writeData>
			writeData(' ');
 1aa:	80 e2       	ldi	r24, 0x20	; 32
 1ac:	0e 94 a6 00 	call	0x14c	; 0x14c <writeData>
 1b0:	e9 cf       	rjmp	.-46     	; 0x184 <main+0x24>

000001b2 <USART_0_initialization>:
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
 1b2:	50 98       	cbi	0x0a, 0	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
 1b4:	58 98       	cbi	0x0b, 0	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 1b6:	51 9a       	sbi	0x0a, 1	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 1b8:	59 98       	cbi	0x0b, 1	; 11
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
 1ba:	0e 94 85 01 	call	0x30a	; 0x30a <USART_0_init>
 1be:	08 95       	ret

000001c0 <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR = (1 << PRSPI) | (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI) | (1 << PRUSART0) | (1 << PRADC);
 1c0:	8f ee       	ldi	r24, 0xEF	; 239
 1c2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
 1c6:	84 b1       	in	r24, 0x04	; 4
 1c8:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
 1ca:	85 b1       	in	r24, 0x05	; 5
 1cc:	9f ef       	ldi	r25, 0xFF	; 255
 1ce:	95 b9       	out	0x05, r25	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
 1d0:	87 b1       	in	r24, 0x07	; 7
 1d2:	80 78       	andi	r24, 0x80	; 128
 1d4:	87 b9       	out	0x07, r24	; 7

		PORTC |= mask;
 1d6:	88 b1       	in	r24, 0x08	; 8
 1d8:	8f 67       	ori	r24, 0x7F	; 127
 1da:	88 b9       	out	0x08, r24	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
 1dc:	8a b1       	in	r24, 0x0a	; 10
 1de:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
 1e0:	8b b1       	in	r24, 0x0b	; 11
 1e2:	9b b9       	out	0x0b, r25	; 11
		break;
	case PORT_DIR_OUT:
		DDRE |= mask;
		break;
	case PORT_DIR_OFF:
		DDRE &= ~mask;
 1e4:	8d b1       	in	r24, 0x0d	; 13
 1e6:	80 7f       	andi	r24, 0xF0	; 240
 1e8:	8d b9       	out	0x0d, r24	; 13

		PORTE |= mask;
 1ea:	8e b1       	in	r24, 0x0e	; 14
 1ec:	8f 60       	ori	r24, 0x0F	; 15
 1ee:	8e b9       	out	0x0e, r24	; 14
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
 1f0:	25 9a       	sbi	0x04, 5	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
 1f2:	2d 98       	cbi	0x05, 5	; 5
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
 1f4:	40 e0       	ldi	r20, 0x00	; 0
 1f6:	60 e8       	ldi	r22, 0x80	; 128
 1f8:	81 e6       	ldi	r24, 0x61	; 97
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 7e 01 	call	0x2fc	; 0x2fc <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 200:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
 202:	15 be       	out	0x35, r1	; 53

	ENABLE_INTERRUPTS();
 204:	78 94       	sei
	    // <true"> High
	    false);

	sysctrl_init();

	USART_0_initialization();
 206:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <USART_0_initialization>
 20a:	08 95       	ret

0000020c <fifo_write>:
fifo_t fifo[NUMBER_OF_FIFOS];


void fifo_write(fifoIndex_t idx, uint8_t din){	
	// Fifo schreiben
	if (((fifo[idx].w - fifo[idx].r) & BMSK) == BMSK) {
 20c:	e8 2f       	mov	r30, r24
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	df 01       	movw	r26, r30
 212:	aa 0f       	add	r26, r26
 214:	bb 1f       	adc	r27, r27
 216:	cd 01       	movw	r24, r26
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	a8 0f       	add	r26, r24
 226:	b9 1f       	adc	r27, r25
 228:	a0 50       	subi	r26, 0x00	; 0
 22a:	bf 4f       	sbci	r27, 0xFF	; 255
 22c:	2c 91       	ld	r18, X
 22e:	11 96       	adiw	r26, 0x01	; 1
 230:	8c 91       	ld	r24, X
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	28 1b       	sub	r18, r24
 236:	31 09       	sbc	r19, r1
 238:	2f 70       	andi	r18, 0x0F	; 15
 23a:	33 27       	eor	r19, r19
 23c:	2f 30       	cpi	r18, 0x0F	; 15
 23e:	31 05       	cpc	r19, r1
 240:	11 f4       	brne	.+4      	; 0x246 <fifo_write+0x3a>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
 242:	2d 9a       	sbi	0x05, 5	; 5
 244:	08 95       	ret
		// Fehlerbehandlung: Fifo ist voll
		LED_set_level(true);
	}
	else {
		// Zeichen eintragen
		fifo[idx].d[fifo[idx].w & BMSK] = din;
 246:	ee 0f       	add	r30, r30
 248:	ff 1f       	adc	r31, r31
 24a:	9f 01       	movw	r18, r30
 24c:	22 0f       	add	r18, r18
 24e:	33 1f       	adc	r19, r19
 250:	22 0f       	add	r18, r18
 252:	33 1f       	adc	r19, r19
 254:	22 0f       	add	r18, r18
 256:	33 1f       	adc	r19, r19
 258:	e2 0f       	add	r30, r18
 25a:	f3 1f       	adc	r31, r19
 25c:	e0 50       	subi	r30, 0x00	; 0
 25e:	ff 4f       	sbci	r31, 0xFF	; 255
 260:	80 81       	ld	r24, Z
 262:	8f 70       	andi	r24, 0x0F	; 15
 264:	df 01       	movw	r26, r30
 266:	a8 0f       	add	r26, r24
 268:	b1 1d       	adc	r27, r1
 26a:	12 96       	adiw	r26, 0x02	; 2
 26c:	6c 93       	st	X, r22
		fifo[idx].w++;
 26e:	80 81       	ld	r24, Z
 270:	8f 5f       	subi	r24, 0xFF	; 255
 272:	80 83       	st	Z, r24
 274:	08 95       	ret

00000276 <fifo_read>:

uint8_t fifo_read(fifoIndex_t idx){
	uint8_t dout = 0xFF;
	
	// Fifo lesen
	if (fifo[idx].w != fifo[idx].r) { // Fifo belegt?
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	fc 01       	movw	r30, r24
 27a:	ee 0f       	add	r30, r30
 27c:	ff 1f       	adc	r31, r31
 27e:	9f 01       	movw	r18, r30
 280:	22 0f       	add	r18, r18
 282:	33 1f       	adc	r19, r19
 284:	22 0f       	add	r18, r18
 286:	33 1f       	adc	r19, r19
 288:	22 0f       	add	r18, r18
 28a:	33 1f       	adc	r19, r19
 28c:	e2 0f       	add	r30, r18
 28e:	f3 1f       	adc	r31, r19
 290:	e0 50       	subi	r30, 0x00	; 0
 292:	ff 4f       	sbci	r31, 0xFF	; 255
 294:	30 81       	ld	r19, Z
 296:	21 81       	ldd	r18, Z+1	; 0x01
 298:	32 17       	cp	r19, r18
 29a:	c9 f0       	breq	.+50     	; 0x2ce <fifo_read+0x58>
		// Zeichen auslesen
		dout = fifo[idx].d[fifo[idx].r&BMSK];
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	fc 01       	movw	r30, r24
 2a2:	ee 0f       	add	r30, r30
 2a4:	ff 1f       	adc	r31, r31
 2a6:	ee 0f       	add	r30, r30
 2a8:	ff 1f       	adc	r31, r31
 2aa:	ee 0f       	add	r30, r30
 2ac:	ff 1f       	adc	r31, r31
 2ae:	8e 0f       	add	r24, r30
 2b0:	9f 1f       	adc	r25, r31
 2b2:	fc 01       	movw	r30, r24
 2b4:	e0 50       	subi	r30, 0x00	; 0
 2b6:	ff 4f       	sbci	r31, 0xFF	; 255
 2b8:	81 81       	ldd	r24, Z+1	; 0x01
 2ba:	8f 70       	andi	r24, 0x0F	; 15
 2bc:	df 01       	movw	r26, r30
 2be:	a8 0f       	add	r26, r24
 2c0:	b1 1d       	adc	r27, r1
 2c2:	12 96       	adiw	r26, 0x02	; 2
 2c4:	8c 91       	ld	r24, X
		fifo[idx].r++;
 2c6:	91 81       	ldd	r25, Z+1	; 0x01
 2c8:	9f 5f       	subi	r25, 0xFF	; 255
 2ca:	91 83       	std	Z+1, r25	; 0x01
 2cc:	08 95       	ret
		fifo[idx].w++;
	}
}

uint8_t fifo_read(fifoIndex_t idx){
	uint8_t dout = 0xFF;
 2ce:	8f ef       	ldi	r24, 0xFF	; 255
		dout = fifo[idx].d[fifo[idx].r&BMSK];
		fifo[idx].r++;
	}
	
	return dout;
}
 2d0:	08 95       	ret

000002d2 <fifo_isEmpty>:

bool fifo_isEmpty(fifoIndex_t idx){	
	
	if (fifo[idx].w != fifo[idx].r) { // Fifo belegt?
 2d2:	e8 2f       	mov	r30, r24
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	ee 0f       	add	r30, r30
 2d8:	ff 1f       	adc	r31, r31
 2da:	9f 01       	movw	r18, r30
 2dc:	22 0f       	add	r18, r18
 2de:	33 1f       	adc	r19, r19
 2e0:	22 0f       	add	r18, r18
 2e2:	33 1f       	adc	r19, r19
 2e4:	22 0f       	add	r18, r18
 2e6:	33 1f       	adc	r19, r19
 2e8:	e2 0f       	add	r30, r18
 2ea:	f3 1f       	adc	r31, r19
 2ec:	e0 50       	subi	r30, 0x00	; 0
 2ee:	ff 4f       	sbci	r31, 0xFF	; 255
 2f0:	20 81       	ld	r18, Z
 2f2:	91 81       	ldd	r25, Z+1	; 0x01
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	29 13       	cpse	r18, r25
 2f8:	80 e0       	ldi	r24, 0x00	; 0
		return false;
	}
	
	return true;
}
 2fa:	08 95       	ret

000002fc <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 2fc:	2f b7       	in	r18, 0x3f	; 63
	cli
 2fe:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 300:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 302:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 304:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 306:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 308:	08 95       	ret

0000030a <USART_0_init>:
{

	// Module is in UART mode

	/* Enable USART0 */
	PRR &= ~(1 << PRUSART0);
 30a:	e4 e6       	ldi	r30, 0x64	; 100
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	8d 7f       	andi	r24, 0xFD	; 253
 312:	80 83       	st	Z, r24

#define BAUD 1000000

#include <utils/setbaud.h>

	UBRR0H = UBRRH_VALUE;
 314:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
 318:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	UCSR0A = USE_2X << U2X0 /*  */
 31c:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	         | 0 << MPCM0;  /* Multi-processor Communication Mode: disabled */

	UCSR0B = 1 << RXCIE0    /* RX Complete Interrupt Enable: enabled */
 320:	88 eb       	ldi	r24, 0xB8	; 184
 322:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

	// UCSR0D = 0 << RXSIE /* USART RX Start Interrupt Enable: disabled */
	//		 | 0 << SFDE; /* Start Frame Detection Enable: disabled */

	return 0;
}
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	08 95       	ret

0000032a <_exit>:
 32a:	f8 94       	cli

0000032c <__stop_program>:
 32c:	ff cf       	rjmp	.-2      	; 0x32c <__stop_program>
