
TimerPwm2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000210  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f73  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000905  00000000  00000000  0000123b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004f7  00000000  00000000  00001b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00002038  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000059e  00000000  00000000  000020f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001e3  00000000  00000000  00002696  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002879  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   8:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  10:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  14:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  18:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  1c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  20:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  24:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  28:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  2c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  30:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  34:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  38:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  3c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  40:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  44:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  48:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  4c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  50:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  54:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  58:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  5c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  60:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  64:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  68:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61
  78:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  7c:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

00000080 <__bad_interrupt>:
  80:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000084 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
	system_init();
  84:	0e 94 56 00 	call	0xac	; 0xac <system_init>
  88:	08 95       	ret

0000008a <main>:
#include <atmel_start.h>

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  8a:	0e 94 42 00 	call	0x84	; 0x84 <atmel_start_init>
  8e:	ff cf       	rjmp	.-2      	; 0x8e <main+0x4>

00000090 <TIMER_1_initialization>:
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
  90:	56 9a       	sbi	0x0a, 6	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
  92:	5e 98       	cbi	0x0b, 6	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
  94:	55 9a       	sbi	0x0a, 5	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
  96:	5d 98       	cbi	0x0b, 5	; 11
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	TIMER_1_init();
  98:	0e 94 82 00 	call	0x104	; 0x104 <TIMER_1_init>
  9c:	08 95       	ret

0000009e <TIMER_0_initialization>:
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
  9e:	23 9a       	sbi	0x04, 3	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
  a0:	2b 98       	cbi	0x05, 3	; 5
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
  a2:	53 9a       	sbi	0x0a, 3	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
  a4:	5b 98       	cbi	0x0b, 3	; 11
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	TIMER_0_init();
  a6:	0e 94 91 00 	call	0x122	; 0x122 <TIMER_0_init>
  aa:	08 95       	ret

000000ac <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR = (1 << PRSPI) | (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI) | (1 << PRUSART0) | (1 << PRADC);
  ac:	8f ee       	ldi	r24, 0xEF	; 239
  ae:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
  b2:	84 b1       	in	r24, 0x04	; 4
  b4:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
  b6:	85 b1       	in	r24, 0x05	; 5
  b8:	9f ef       	ldi	r25, 0xFF	; 255
  ba:	95 b9       	out	0x05, r25	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
  bc:	87 b1       	in	r24, 0x07	; 7
  be:	80 78       	andi	r24, 0x80	; 128
  c0:	87 b9       	out	0x07, r24	; 7

		PORTC |= mask;
  c2:	88 b1       	in	r24, 0x08	; 8
  c4:	8f 67       	ori	r24, 0x7F	; 127
  c6:	88 b9       	out	0x08, r24	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
  c8:	8a b1       	in	r24, 0x0a	; 10
  ca:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
  cc:	8b b1       	in	r24, 0x0b	; 11
  ce:	9b b9       	out	0x0b, r25	; 11
		break;
	case PORT_DIR_OUT:
		DDRE |= mask;
		break;
	case PORT_DIR_OFF:
		DDRE &= ~mask;
  d0:	8d b1       	in	r24, 0x0d	; 13
  d2:	80 7f       	andi	r24, 0xF0	; 240
  d4:	8d b9       	out	0x0d, r24	; 13

		PORTE |= mask;
  d6:	8e b1       	in	r24, 0x0e	; 14
  d8:	8f 60       	ori	r24, 0x0F	; 15
  da:	8e b9       	out	0x0e, r24	; 14
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (1 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
  dc:	44 e0       	ldi	r20, 0x04	; 4
  de:	60 e8       	ldi	r22, 0x80	; 128
  e0:	81 e6       	ldi	r24, 0x61	; 97
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 7b 00 	call	0xf6	; 0xf6 <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
  e8:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
  ea:	15 be       	out	0x35, r1	; 53
{
	mcu_init();

	sysctrl_init();

	TIMER_1_initialization();
  ec:	0e 94 48 00 	call	0x90	; 0x90 <TIMER_1_initialization>

	TIMER_0_initialization();
  f0:	0e 94 4f 00 	call	0x9e	; 0x9e <TIMER_0_initialization>
  f4:	08 95       	ret

000000f6 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
  f6:	2f b7       	in	r18, 0x3f	; 63
	cli
  f8:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
  fa:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
  fc:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
  fe:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 100:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 102:	08 95       	ret

00000104 <TIMER_1_init>:
 */
int8_t TIMER_1_init()
{

	/* Enable TC0 */
	PRR &= ~(1 << PRTIM0);
 104:	e4 e6       	ldi	r30, 0x64	; 100
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	8f 7d       	andi	r24, 0xDF	; 223
 10c:	80 83       	st	Z, r24

	TCCR0A = (1 << COM0A1) | (0 << COM0A0)   /* Clear OCA on Compare Match, set OCA on BOTTOM (non-inverting mode) */
 10e:	83 eb       	ldi	r24, 0xB3	; 179
 110:	84 bd       	out	0x24, r24	; 36
	         | (1 << COM0B1) | (1 << COM0B0) /* Set OCB on Compare Match, clear OCB on BOTTOM (inverting mode) */
	         | (1 << WGM01) | (1 << WGM00);  /* TC8 Mode 3 Fast PWM */

	TCCR0B = 0                                          /* TC8 Mode 3 Fast PWM */
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	85 bd       	out	0x25, r24	; 37

	// GTCCR = 0 << TSM /* Timer/Counter Synchronization Mode: disabled */
	//		 | 0 << PSRASY /* Prescaler Reset Timer/Counter2: disabled */
	//		 | 0 << PSRSYNC; /* Prescaler Reset: disabled */
	
	OCR0A = 0x7F;
 116:	8f e7       	ldi	r24, 0x7F	; 127
 118:	87 bd       	out	0x27, r24	; 39
	OCR0B = 0x3F;
 11a:	8f e3       	ldi	r24, 0x3F	; 63
 11c:	88 bd       	out	0x28, r24	; 40

	return 0;
}
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	08 95       	ret

00000122 <TIMER_0_init>:
 */
int8_t TIMER_0_init()
{

	/* Enable TC2 */
	PRR &= ~(1 << PRTIM2);
 122:	e4 e6       	ldi	r30, 0x64	; 100
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	8f 7b       	andi	r24, 0xBF	; 191
 12a:	80 83       	st	Z, r24

	TCCR2A = (1 << COM2A1) | (0 << COM2A0)   /* Clear OCA on up-counting, set OCA on down-counting */
 12c:	81 eb       	ldi	r24, 0xB1	; 177
 12e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	         | (1 << COM2B1) | (1 << COM2B0) /* Set OCB on up-couting, clear OCB on down-counting */
	         | (0 << WGM21) | (1 << WGM20);  /* TC8 Mode 1 Phase Correct */

	TCCR2B = 0                                          /* TC8 Mode 1 Phase Correct */
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>

	// GTCCR = 0 << TSM /* Timer/Counter Synchronization Mode: disabled */
	//		 | 0 << PSRASY /* Prescaler Reset Timer/Counter2: disabled */
	//		 | 0 << PSRSYNC; /* Prescaler Reset: disabled */

	OCR2A = 0x7F;
 138:	8f e7       	ldi	r24, 0x7F	; 127
 13a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	OCR2B = 0x3F;
 13e:	8f e3       	ldi	r24, 0x3F	; 63
 140:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
	
	return 0;
}
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	08 95       	ret

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
