
TimerPollingLed.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000176  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000260  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000077f  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a4  00000000  00000000  000009ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001a0  00000000  00000000  000010a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000264  00000000  00000000  00001243  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_clear_bss>:
  78:	21 e0       	ldi	r18, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
  80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
  82:	a1 30       	cpi	r26, 0x01	; 1
  84:	b2 07       	cpc	r27, r18
  86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>
  88:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  8c:	0c 94 b9 00 	jmp	0x172	; 0x172 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <atmel_start_init>:
  94:	0c 94 78 00 	jmp	0xf0	; 0xf0 <system_init>

00000098 <LED_task>:
  98:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  9c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  a0:	80 31       	cpi	r24, 0x10	; 16
  a2:	97 42       	sbci	r25, 0x27	; 39
  a4:	30 f0       	brcs	.+12     	; 0xb2 <LED_task+0x1a>
  a6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  aa:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  ae:	80 e2       	ldi	r24, 0x20	; 32
  b0:	83 b9       	out	0x03, r24	; 3
  b2:	08 95       	ret

000000b4 <delay_ms>:
  b4:	88 23       	and	r24, r24
  b6:	41 f0       	breq	.+16     	; 0xc8 <delay_ms+0x14>
  b8:	e9 ef       	ldi	r30, 0xF9	; 249
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <delay_ms+0x8>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <delay_ms+0xe>
  c2:	00 00       	nop
  c4:	81 50       	subi	r24, 0x01	; 1
  c6:	f6 cf       	rjmp	.-20     	; 0xb4 <delay_ms>
  c8:	08 95       	ret

000000ca <DoOtherStuff_task>:
  ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ce:	8f 5f       	subi	r24, 0xFF	; 255
  d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  d4:	63 e0       	ldi	r22, 0x03	; 3
  d6:	0e 94 ad 00 	call	0x15a	; 0x15a <__udivmodqi4>
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	89 0f       	add	r24, r25
  de:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <delay_ms>

000000e2 <main>:
  e2:	0e 94 4a 00 	call	0x94	; 0x94 <atmel_start_init>
  e6:	0e 94 4c 00 	call	0x98	; 0x98 <LED_task>
  ea:	0e 94 65 00 	call	0xca	; 0xca <DoOtherStuff_task>
  ee:	fb cf       	rjmp	.-10     	; 0xe6 <main+0x4>

000000f0 <system_init>:
  f0:	8f ee       	ldi	r24, 0xEF	; 239
  f2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
  f6:	84 b1       	in	r24, 0x04	; 4
  f8:	14 b8       	out	0x04, r1	; 4
  fa:	85 b1       	in	r24, 0x05	; 5
  fc:	9f ef       	ldi	r25, 0xFF	; 255
  fe:	95 b9       	out	0x05, r25	; 5
 100:	87 b1       	in	r24, 0x07	; 7
 102:	80 78       	andi	r24, 0x80	; 128
 104:	87 b9       	out	0x07, r24	; 7
 106:	88 b1       	in	r24, 0x08	; 8
 108:	8f 67       	ori	r24, 0x7F	; 127
 10a:	88 b9       	out	0x08, r24	; 8
 10c:	8a b1       	in	r24, 0x0a	; 10
 10e:	1a b8       	out	0x0a, r1	; 10
 110:	8b b1       	in	r24, 0x0b	; 11
 112:	9b b9       	out	0x0b, r25	; 11
 114:	8d b1       	in	r24, 0x0d	; 13
 116:	80 7f       	andi	r24, 0xF0	; 240
 118:	8d b9       	out	0x0d, r24	; 13
 11a:	8e b1       	in	r24, 0x0e	; 14
 11c:	8f 60       	ori	r24, 0x0F	; 15
 11e:	8e b9       	out	0x0e, r24	; 14
 120:	25 9a       	sbi	0x04, 5	; 4
 122:	2d 98       	cbi	0x05, 5	; 5
 124:	44 e0       	ldi	r20, 0x04	; 4
 126:	60 e8       	ldi	r22, 0x80	; 128
 128:	81 e6       	ldi	r24, 0x61	; 97
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 9c 00 	call	0x138	; 0x138 <protected_write_io>
 130:	13 be       	out	0x33, r1	; 51
 132:	15 be       	out	0x35, r1	; 53
 134:	0c 94 a3 00 	jmp	0x146	; 0x146 <TIMER_0_init>

00000138 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 138:	2f b7       	in	r18, 0x3f	; 63
	cli
 13a:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 13c:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 13e:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 140:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 142:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 144:	08 95       	ret

00000146 <TIMER_0_init>:
 146:	e4 e6       	ldi	r30, 0x64	; 100
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	87 7f       	andi	r24, 0xF7	; 247
 14e:	80 83       	st	Z, r24
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	08 95       	ret

0000015a <__udivmodqi4>:
 15a:	99 1b       	sub	r25, r25
 15c:	79 e0       	ldi	r23, 0x09	; 9
 15e:	04 c0       	rjmp	.+8      	; 0x168 <__udivmodqi4_ep>

00000160 <__udivmodqi4_loop>:
 160:	99 1f       	adc	r25, r25
 162:	96 17       	cp	r25, r22
 164:	08 f0       	brcs	.+2      	; 0x168 <__udivmodqi4_ep>
 166:	96 1b       	sub	r25, r22

00000168 <__udivmodqi4_ep>:
 168:	88 1f       	adc	r24, r24
 16a:	7a 95       	dec	r23
 16c:	c9 f7       	brne	.-14     	; 0x160 <__udivmodqi4_loop>
 16e:	80 95       	com	r24
 170:	08 95       	ret

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
