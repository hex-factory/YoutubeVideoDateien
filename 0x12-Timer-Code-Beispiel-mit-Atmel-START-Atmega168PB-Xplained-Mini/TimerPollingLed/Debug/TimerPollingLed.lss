
TimerPollingLed.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000258  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e55  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009e7  00000000  00000000  0000116d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005bb  00000000  00000000  00001b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00002110  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005bd  00000000  00000000  000021e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000187  00000000  00000000  0000279d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002924  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_clear_bss>:
  78:	21 e0       	ldi	r18, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
  80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
  82:	a1 30       	cpi	r26, 0x01	; 1
  84:	b2 07       	cpc	r27, r18
  86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>
  88:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  8c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
	system_init();
  94:	0e 94 7f 00 	call	0xfe	; 0xfe <system_init>
  98:	08 95       	ret

0000009a <LED_task>:
		DoOtherStuff_task();
	}
}

void LED_task(void){
	if (TCNT1 >= 10000) {	// check if 10 ms are elapsed
  9a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  9e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  a2:	80 31       	cpi	r24, 0x10	; 16
  a4:	97 42       	sbci	r25, 0x27	; 39
  a6:	30 f0       	brcs	.+12     	; 0xb4 <LED_task+0x1a>
		TCNT1 = 0;			// reset timer
  a8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  ac:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 *
 * \param[in] pin       The pin number for device
 */
static inline void PORTB_toggle_pin_level(const uint8_t pin)
{
	PINB = 1 << pin;
  b0:	80 e2       	ldi	r24, 0x20	; 32
  b2:	83 b9       	out	0x03, r24	; 3
  b4:	08 95       	ret

000000b6 <delay_ms>:
	delay_ms(1 + (randomNumber % 3));
}

// delay function
void delay_ms(uint8_t count) {
	while(count--) {
  b6:	88 23       	and	r24, r24
  b8:	41 f0       	breq	.+16     	; 0xca <delay_ms+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	e9 ef       	ldi	r30, 0xF9	; 249
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	31 97       	sbiw	r30, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <delay_ms+0x8>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <delay_ms+0xe>
  c4:	00 00       	nop
  c6:	81 50       	subi	r24, 0x01	; 1
  c8:	c1 f7       	brne	.-16     	; 0xba <delay_ms+0x4>
  ca:	08 95       	ret

000000cc <DoOtherStuff_task>:


// task duration is between 1 ms and 3 ms
void DoOtherStuff_task(void) {
	static uint8_t randomNumber = 0;
	randomNumber++;
  cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  d0:	8f 5f       	subi	r24, 0xFF	; 255
  d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	delay_ms(1 + (randomNumber % 3));
  d6:	9b ea       	ldi	r25, 0xAB	; 171
  d8:	89 9f       	mul	r24, r25
  da:	91 2d       	mov	r25, r1
  dc:	11 24       	eor	r1, r1
  de:	96 95       	lsr	r25
  e0:	29 2f       	mov	r18, r25
  e2:	22 0f       	add	r18, r18
  e4:	92 0f       	add	r25, r18
  e6:	89 1b       	sub	r24, r25
  e8:	8f 5f       	subi	r24, 0xFF	; 255
  ea:	0e 94 5b 00 	call	0xb6	; 0xb6 <delay_ms>
  ee:	08 95       	ret

000000f0 <main>:
void delay_ms(uint8_t count);

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  f0:	0e 94 4a 00 	call	0x94	; 0x94 <atmel_start_init>

	/* Replace with your application code */
	while (1) {
		LED_task();
  f4:	0e 94 4d 00 	call	0x9a	; 0x9a <LED_task>
		DoOtherStuff_task();
  f8:	0e 94 66 00 	call	0xcc	; 0xcc <DoOtherStuff_task>
  fc:	fb cf       	rjmp	.-10     	; 0xf4 <main+0x4>

000000fe <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR = (1 << PRSPI) | (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI) | (1 << PRUSART0) | (1 << PRADC);
  fe:	8f ee       	ldi	r24, 0xEF	; 239
 100:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
 104:	84 b1       	in	r24, 0x04	; 4
 106:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
 108:	85 b1       	in	r24, 0x05	; 5
 10a:	9f ef       	ldi	r25, 0xFF	; 255
 10c:	95 b9       	out	0x05, r25	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
 10e:	87 b1       	in	r24, 0x07	; 7
 110:	80 78       	andi	r24, 0x80	; 128
 112:	87 b9       	out	0x07, r24	; 7

		PORTC |= mask;
 114:	88 b1       	in	r24, 0x08	; 8
 116:	8f 67       	ori	r24, 0x7F	; 127
 118:	88 b9       	out	0x08, r24	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
 11a:	8a b1       	in	r24, 0x0a	; 10
 11c:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
 11e:	8b b1       	in	r24, 0x0b	; 11
 120:	9b b9       	out	0x0b, r25	; 11
		break;
	case PORT_DIR_OUT:
		DDRE |= mask;
		break;
	case PORT_DIR_OFF:
		DDRE &= ~mask;
 122:	8d b1       	in	r24, 0x0d	; 13
 124:	80 7f       	andi	r24, 0xF0	; 240
 126:	8d b9       	out	0x0d, r24	; 13

		PORTE |= mask;
 128:	8e b1       	in	r24, 0x0e	; 14
 12a:	8f 60       	ori	r24, 0x0F	; 15
 12c:	8e b9       	out	0x0e, r24	; 14
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
 12e:	25 9a       	sbi	0x04, 5	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
 130:	2d 98       	cbi	0x05, 5	; 5
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (1 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
 132:	44 e0       	ldi	r20, 0x04	; 4
 134:	60 e8       	ldi	r22, 0x80	; 128
 136:	81 e6       	ldi	r24, 0x61	; 97
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 a4 00 	call	0x148	; 0x148 <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 13e:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
 140:	15 be       	out	0x35, r1	; 53
#include <system.h>

void TIMER_0_initialization(void)
{

	TIMER_0_init();
 142:	0e 94 ab 00 	call	0x156	; 0x156 <TIMER_0_init>
 146:	08 95       	ret

00000148 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 148:	2f b7       	in	r18, 0x3f	; 63
	cli
 14a:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 14c:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 14e:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 150:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 152:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 154:	08 95       	ret

00000156 <TIMER_0_init>:
 */
int8_t TIMER_0_init()
{

	/* Enable TC1 */
	PRR &= ~(1 << PRTIM1);
 156:	e4 e6       	ldi	r30, 0x64	; 100
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	87 7f       	andi	r24, 0xF7	; 247
 15e:	80 83       	st	Z, r24

	// TCCR1A = (0 << COM1A1) | (0 << COM1A0) /* Normal port operation, OCA disconnected */
	//		 | (0 << COM1B1) | (0 << COM1B0) /* Normal port operation, OCB disconnected */
	//		 | (0 << WGM11) | (0 << WGM10); /* TC16 Mode 0 Normal */

	TCCR1B = (0 << WGM13) | (0 << WGM12)                /* TC16 Mode 0 Normal */
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	//		 | 0 << OCIE1A /* Output Compare A Match Interrupt Enable: disabled */
	//		 | 0 << ICIE1 /* Input Capture Interrupt Enable: disabled */
	//		 | 0 << TOIE1; /* Overflow Interrupt Enable: disabled */

	return 0;
}
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	08 95       	ret

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
